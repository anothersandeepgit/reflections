
What happens when you initialize a repository? Why do you need to do it?

	when I initialize a repository it creates a .git folder, in effect creating
	an empty git repository; I need to do that to commit files and put them under 
	version contyrol to save their history.
	
How is the staging area different from the working directory and the repository? 
What value do you think it offers?
	
	Staging area is an intermediate state between a free file and its final 
	destination in the repository. It allows us tyo pick and choose which files
	in the working directory should be moved under version control.

How can you use the staging area to make sure you have one commit per logical change?

	By git add-ing only files related to one logical change and then running
	git commit to commit only those files we achieve this objective.
	
What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

	When experimenting or making major change at the same time not to interfere
	with fixing of bugs branches help. Any parallel development requires branches.
	
How do the diagrams help you visualize the branch structure?
	
	Diagrams present a 2 dimensional representation of commit history
	without which branch structure can not be easily visualized.
	
What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?

	Merging brings in changes made in one branch to destination branch. Branching
	introduces 2nd dimension to the version tree, so we represent it likewise.
	
What are the pros and cons of Git’s automatic merging vs. always doing merges 
manually?

	always doing merges manually can become too much if there are many files involved 
	especially on large teams with many members committing.
	automatic merging can make mistakes where judgement is required because
	GIT is not an intelligent software with machine learning.
	

