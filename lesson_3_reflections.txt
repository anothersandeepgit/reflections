
When would you want to use a remote repository rather than keeping all your work local?
  if I want to share my repository contents with others
  to collaborate with public

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
  
	The logic is same as working on 2 different branches. We decide when we want
	to incorporate other developers commits into our own development when we are
	ready.
	
Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

	fork is creating an equivalen of a branch on someone else's repository on GitHub.
	This is helpful if we don't have permission to commit to the owner's repository.
	clone is creating a copy of a remote repository on a local machine. It is useful
	in making changes on a local machine especially when disconnected from remote.
	branch is creating a label for a specific commit in a repository. This is useful
	for experimenting, or any other parallel development effort.
	
What is the benefit of having a copy of the last known state of the remote stored 
locally?

	It helps in determining if the remote has been updated since last time changes 
	were pulled to local repository.
	
How would you collaborate without using Git or GitHub? What would be easier, and 
what would be harder?

	without using Git or GitHub we would have to exchange ZIPped code-tree making
	sure different ZIPs have different names. It would be harder.
	
When would you want to make changes in a separate branch rather than directly in 
master? What benefits does each approach have?

	When there is a possibility of different developers needing to make change
	to common files then it makes sense for each to work in different branches
	so as not to step on each other toes overwriting each other's changes
	accidentally. Branch based workflow is slower because it requires 
	co-ordination, but it is unavoidable in case of larger teams.
	
	

